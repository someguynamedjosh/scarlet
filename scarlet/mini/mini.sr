true IS UNIQUE AS_LANGUAGE_ITEM(true)
false IS UNIQUE AS_LANGUAGE_ITEM(false)
void IS UNIQUE AS_LANGUAGE_ITEM(void)

true AS_LANGUAGE_ITEM(and)
true AS_LANGUAGE_ITEM(trivial_t_statement)
true AS_LANGUAGE_ITEM(invariant_truth_t_statement)
true AS_LANGUAGE_ITEM(invariant_truth_rev_t_statement)
true AS_LANGUAGE_ITEM(eq_ext_rev_t_statement)
true AS_LANGUAGE_ITEM(inv_eq_t_statement)
# true AS_LANGUAGE_ITEM(refl_t_statement)
# true AS_LANGUAGE_ITEM(decision_eq_t_statement)
# true AS_LANGUAGE_ITEM(decision_neq_t_statement)
# true AS_LANGUAGE_ITEM(decision_identity_t_statement)

{
    has_tail IS BUILTIN_FUNCTION(has_tail)
    x IS VAR() AS_LANGUAGE_ITEM(x)
    y IS VAR() AS_LANGUAGE_ITEM(y)

    when_equal IS 
    VAR() AS_LANGUAGE_ITEM(when_equal)

    when_not_equal IS 
    VAR() AS_LANGUAGE_ITEM(when_not_equal)
}

tail IS BUILTIN_FUNCTION(tail_value)

x IS VAR()
y IS VAR()
precondition IS y
precondition_t IS ANY_PROOF(precondition)
postcondition IS x
postcondition_t IS ANY_PROOF(postcondition DEP precondition_t)
postcondition_t

x2 IS VAR()
y2 IS VAR()

proof IS ANY_PROOF(x2 DEP ANY_PROOF(y2) ORD 200)

# proof SHOWN
postcondition_t(x2 y2 PROOF(postcondition) IS proof)
