# This is a comment.

# Each of these are equal to themselves but not to each other. The keyword "IS" 
# denotes a definition. a, b, and c are generically referred to as 
# "expressions" and are more specifically referred to as "values".
a IS UNIQUE
b IS UNIQUE
c IS UNIQUE
# This is how "true" and "false" are defined.
true IS UNIQUE
false IS UNIQUE

# These are "structs", computer science speak for tuples where the fields can 
# have names.
ab IS { first IS a, second IS b }
employee IS { name IS c, title IS b }

# All values in the language are either uniques or structs. Structs can be
# nested to arbitrary depth.

# last_field is a function built in to the language, it cannot be defined in
# terms of other functions.
last_field(ab) # This is equal to b.

# decision is another builtin function, which is equal to the third argument
# when the first two are equal and equal to the fourth argument otherwise.
decision(a, b, true, false) # This equals false
decision(c, c, true, false) # This equals true

# This:
x = y
# Is a shorthand for this:
decision(x, y, true, false)

# In mathematics, we often do things like this:
# -------
# "r" is the radius of a circle
# A = pi * r * r
# A(5) is then the area of a circle of radius 5.
# -------
# We can define custom functions in a similar fashion:
x IS ANYTHING
is_false IS x = false
is_false(false) # Is the same as writing "false = false"
is_false(b) # Is the same as writing "b = false"

# "x" is not special, it is just a (identity) function:
x(c) # This equals c

# Additionally, the concepts of "values" and 
# "functions with no parameters" are equivalent:
true() # This equals true

# We now have the ability to define Boolean algebra:
x IS ANYTHING
y IS ANYTHING
and IS decision(x true y false)
or IS decision(x true true y)
not IS decision(x true false true)
# It is currently an open design problem how best to make these operations
# closed in the set of booleans. It needs to be simple to compete with other
# languages that handle this task with ease, but at least one seemingly 
# excellent  solution has already been thrown out for causing long-term 
# problems. Though for the sake of defining axioms, closure is not necessary.

# Another language feature is proofs. Expressions "depend on" zero or more 
# parameters, and "produce" a single value and zero or more proofs. This is
# analogous to how every expression in a conventional programming language 
# produces a value and has a type. The former is the data flowing through the
# program, the latter is metadata about the data flowing through the program.
# As an example, the standard library has an axiom called:
reflexivity_t
# Which says that, depending on any value of "x", it is proven that x = x.
# Specifically, it is saying that the expression x = x will always evaluate to
# the value "true", no matter what value is substituted for "x". We could
# substitute any value for "x" to prove that it is equal to itself:
reflexivity_t(a) # Proves a = a

# Any expression that produces one or more proof and whose value is unimportant
# is referred to as a theorem.

# There are "proof parameters" that accept any expression proving a certain
# fact. They are used to express the requirements of theorems. For example, if 
# we need a precondition that x = y, we write:
some_label IS ANY_PROOF(x = y)

# We can later use "some_label" in other theorems that require the two to be
# equal to each other. Here's an example of constructing a theorem from
# requirements and other theorems:

# From a = b AND f(a)
# Proves f(b)
equal_argument_t IS
last_field({
    a IS ANYTHING
    b IS ANYTHING
    f IS ANYTHING WITH_PARAMETER(x)
    a_equals_b_t IS ANY_PROOF(a = b)
    fa_is_true_t IS ANY_PROOF(f(a))

    # Proves f(a) = f(b)
    t1 IS equality_extentionality_t(
        f IS f, y IS a, z IS b,
        PROOF(y = z) IS a_equals_b_t,
    )
    # Proves f(b)
    t2 IS equal_statement_t(
        y IS f(a), z IS f(b),
        PROOF(y) IS fa_is_true_t,
        PROOF(y = z) IS t1,
    )
    
    # Sanity check
    just_t(
        statement IS f(b),
        PROOF(statement) IS t2,
    )
})

# And finally, we have the current set of axioms.

# From y != true AND y
# Proves x
explode_false_t

# From y = z
# Proves f(z) = f(y)
equality_extentionality_reverse_t

# Proves y = y
reflexivity_t

# From statement (allowed to depend on y = z) 
#  AND statement (allowed to depend on y != z)
# Proves statement
cases_t

# From y = z
# Proves decision(y z u v) = u
decision_equal_t

# From y != z
# Proves decision(y z u v) = v
decision_not_equal_t

# Finally, there are a number of "sneaky axioms", which are behaviors that are
# baked into the compiler for the language either because they cannot be 
# expressed using the syntax of the language or because it makes life easier to
# not have to manually invoke a particular theorem every time a particular kind
# of proof is required. (The job of the compiler is to understand and 
# interpret code written in the language.) The sneaky axioms are as follows:
# - Separate uses of the keyword "UNIQUE" are not equal to each other.
# - Two structs are equal if all their fields are equal.
# - Two function calls are equal if they call the same function with the same arguments.
# - Anything of the form x(y IS z) is equivalent to something identical to "x"
#   except that all instances of "y" have been replaced with "z".
# - There are likely others I cannot recall at this moment.
