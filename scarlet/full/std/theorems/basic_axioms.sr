decision IS basics.decision
implies IS std.logic.implies

trivial_t IS 
tail_value({
   true AS_LANGUAGE_ITEM(trivial_t_statement)

   AXIOM(trivial_t)
})

invariant_truth_t IS 
tail_value({
   y IS VAR()
   ANY_PROOF_OF(y)

   just(y = true)
   AS_LANGUAGE_ITEM(invariant_truth_t_statement)

   AXIOM(invariant_truth_t)
})


invariant_truth_rev_t IS 
tail_value({
   y IS VAR()
   ANY_PROOF_OF(y = true)

   y
   AS_LANGUAGE_ITEM(
      invariant_truth_rev_t_statement 
   )

   AXIOM(invariant_truth_rev_t)
})

eq_ext_rev_t IS 
tail_value({
   y IS VAR()
   z IS VAR()
   ANY_PROOF_OF(y = z)

   just(f(z) = f(y))
   AS_LANGUAGE_ITEM(eq_ext_rev_t_statement)

   AXIOM(eq_ext_rev_t)
})

# From y = z   y
# Proves z
inv_eq_t IS 
tail_value({
   y IS VAR()
   ANY_PROOF_OF(y)
   z IS VAR()
   ANY_PROOF_OF(y = z)

   z AS_LANGUAGE_ITEM(inv_eq_t_statement)

   AXIOM(inv_eq_t)
})

refl_t IS
tail_value({
   y IS VAR()

   just(y = y)
   AS_LANGUAGE_ITEM(refl_t_statement)

   AXIOM(refl_t)
})

cases_t IS
tail_value({
   y IS VAR()
   z IS VAR()
   equal IS ANY_PROOF_OF(y = z)

   not_equal IS 
   ANY_PROOF_OF(decision(y z false true))

   statement_when_equal IS VAR()
   ANY_PROOF_OF(statement_when_equal DEP equal)
   statement_when_not_equal IS VAR()

   ANY_PROOF_OF(
      statement_when_not_equal DEP not_equal
   )

   statement IS 
   decision(
      y 
      z 
      statement_when_equal 
      statement_when_not_equal
   )
   AS_LANGUAGE_ITEM(cases_t_statement)

   AXIOM(cases_t SWALLOWING equal not_equal)
})
